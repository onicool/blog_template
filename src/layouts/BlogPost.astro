---
import Layout from './Layout.astro';
import TableOfContents from '../components/TableOfContents.astro';
import RelatedPosts from '../components/RelatedPosts.astro';
import CodeBlock from '../components/CodeBlock';
import type { CollectionEntry } from 'astro:content';

interface Props {
  post: CollectionEntry<'blog'>;
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const { post, headings } = Astro.props;
const { title, description, pubDate, updatedDate, tags } = post.data;
---

<Layout
  title={title}
  description={description}
  article={true}
  publishedTime={pubDate}
  modifiedTime={updatedDate}
  tags={tags}
>
  <article class="max-w-4xl mx-auto">
    <div class="mb-8">
      <h1 class="font-cyber text-4xl text-cyber-primary mb-4">{title}</h1>
      <p class="text-gray-300 mb-4">{description}</p>
      <div class="flex justify-between items-center">
        <div class="flex gap-2">
          {tags.map(tag => (
            <a
              href={`/blog#${tag}`}
              class="text-sm px-3 py-1 rounded-full bg-cyber-dark border border-cyber-primary text-cyber-primary hover:border-cyber-secondary hover:text-cyber-secondary transition-colors"
              data-tag={tag}
            >
              #{tag}
            </a>
          ))}
        </div>
        <div class="text-right">
          <time class="text-gray-400 block">
            公開: {pubDate.toLocaleDateString('ja-JP')}
          </time>
          {updatedDate && (
            <time class="text-cyber-secondary block">
              更新: {updatedDate.toLocaleDateString('ja-JP')}
            </time>
          )}
        </div>
      </div>
    </div>

    <div class="lg:grid lg:grid-cols-[1fr_250px] lg:gap-8">
      <div class="prose prose-invert max-w-none" id="article-content">
        <slot />
        <RelatedPosts currentPost={post} />
      </div>
      
      <aside class="hidden lg:block">
        <TableOfContents headings={headings} />
      </aside>
    </div>

    <div class="mt-12 pt-8 border-t border-cyber-primary">
      <a
        href="/blog"
        class="inline-flex items-center font-cyber text-cyber-primary hover:text-cyber-secondary transition-colors"
      >
        <span class="mr-2">←</span>
        記事一覧に戻る
      </a>
    </div>
  </article>
</Layout>

<script>
  function wrapCodeBlock(element: HTMLElement) {
    // preタグかcodeタグのどちらかを処理
    const isPreElement = element.tagName === 'PRE';
    const preElement = isPreElement ? element : element.parentElement;
    const codeElement = isPreElement ? element.querySelector('code') : element;
    
    if (!preElement || !codeElement) return;

    // コードの内容を取得
    const code = codeElement.textContent || '';

    // すでにラップされているかチェック
    if (preElement.parentElement?.classList.contains('group')) return;

    // ラッパー作成
    const wrapper = document.createElement('div');
    wrapper.className = 'relative group';

    // コピーボタン作成
    const button = document.createElement('button');
    button.className = `
      absolute top-2 right-2 px-3 py-1 
      text-sm font-cyber rounded-md
      transition-all duration-200
      bg-cyber-dark text-cyber-primary border border-cyber-primary 
      hover:text-cyber-secondary hover:border-cyber-secondary
      opacity-0 group-hover:opacity-100 focus:opacity-100
      z-10
    `;
    button.textContent = 'Copy';
    button.setAttribute('aria-label', 'コードをコピー');

    // コピー機能追加
    button.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(code);
        button.textContent = 'Copied!';
        button.classList.remove('bg-cyber-dark', 'text-cyber-primary', 'border-cyber-primary');
        button.classList.add('bg-green-600', 'text-white', 'opacity-100');
        
        setTimeout(() => {
          button.textContent = 'Copied!';
          button.classList.remove('bg-green-600', 'text-white', 'opacity-100');
          button.classList.add('bg-cyber-dark', 'text-cyber-primary', 'border-cyber-primary');
        }, 2000);
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    });

    // スタイル適用
    preElement.className = `${preElement.className} relative rounded-lg border border-cyber-primary bg-cyber-dark p-4 overflow-x-auto`;

    // DOM構造の再構築
    preElement.parentNode?.insertBefore(wrapper, preElement);
    wrapper.appendChild(preElement);
    wrapper.appendChild(button);
  }

  function initCodeBlocks() {
    const articleContent = document.getElementById('article-content');
    if (!articleContent) return;

    // pre要素とcode要素の両方を検索
    const preElements = articleContent.querySelectorAll('pre');
    const codeElements = articleContent.querySelectorAll('code');

    // 両方の要素をラップ
    preElements.forEach(pre => {
      if (pre instanceof HTMLElement) {
        wrapCodeBlock(pre);
      }
    });
    codeElements.forEach(code => {
      if (code instanceof HTMLElement && (!code.parentElement?.parentElement?.classList.contains('group'))) {
        wrapCodeBlock(code);
      }
    });
  }

  // 初期化
  initCodeBlocks();
  // Astroページ遷移時の再初期化
  document.addEventListener('astro:page-load', initCodeBlocks);
</script>

<style>
  .prose {
    --tw-prose-invert-headings: theme(colors.cyber.primary);
    --tw-prose-invert-links: theme(colors.cyber.secondary);
    --tw-prose-invert-pre-bg: theme(colors.cyber.dark);

    h2{
      color: theme(colors.cyber.primary);
    }
    h3{
      color: theme(colors.cyber.header2);
    }
    h4{
      color: theme(colors.cyber.header3);
    }
  }
  
  .prose pre {
    border: 1px solid theme(colors.cyber.primary);
    border-radius: 0.5rem;
  }
</style>